    canvas
canvas标签用于绘制图像（通过脚本，通常是js)
canvas本身没有绘制能力，需要getContext()返
回一个对象，该对象上提供了画布的方法和属性


    HTML废弃标签
<acronym>首字母的缩写
<applet>java小应用程序，主要提供绘图功能
<basefont>定义了基准字体
<bgsound>添加背景音乐
<big>放大字体
<blink>实现闪烁效果
<center>使内容居中
<dir>目录列表
<font>定义字体字号颜色
<frame><frameset>
<hgroup>给标题分组
<isindex>单行文本控件
<marquee>滚动字幕
<multicol>实现多列布局
<nobr>禁止换行
<spacer>插入空白
<strike>删除线


    IE6 bug
1.padding与border算入宽高
2.在块元素设定margin为双倍
3.分配空间怪异
1）字体大小为奇数之边框高度少1px
2）line-height，文本垂直居中差1px 
3）与父标签的宽度的奇偶不同的居中造成1px的偏离
4.内部盒模型超过父级时，父级被撑大
5.lineheight默认行高bug
6.行标签间有一小段空白
7.标签高度无法小于19px
8.左浮元素margin-bottom失效
9.img于块元素中，底边多出空白 
10.li之间会有间距

    css js放置位置原因
首先解释网站加载过程
1.浏览器从服务器接收html代码，解析html
2.同时构建dom树和渲染树
4.遇js文件加载，阻塞dom树构建;遇css文件阻塞
渲染树的构建
script标签最好放在</body>标签的前面，因为放在所有body
中的标签后面就不会出现网页加载时出现空白的情况，可以持续
的给用户提供视觉反馈，同时在有些情况下，会降低错误的发生

css标签应该放在<head></head>标签之间，因为如果放在</body>
标签的前面，那么当DOM树构建完成了，渲染树才构建，那么当渲染
树构建完成，浏览器不得不再重新渲染整个页面，这样造成了资源的
浪费。效率也不高。如果放在<head></head>之间，浏览器边构建边
渲染，效率要高的多。

    
    渐进式渲染
对渲染进行分割 从具体的使用的场景, 不同的 Level 实际上对应
不同的页面内容
