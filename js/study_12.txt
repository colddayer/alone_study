        显示原型和隐式原型，手绘原型链，原型链是什么，为什么要有原型链
显示原型prototype
隐式原型__proto__
每个函数在创建之后都会拥有一个prototype属性指向其原型对象
每个实例在创建后都有一个proto属性指向构造函数constructord的prototype
构造函数 -> prototype->原型对象<-proto<-实例
        <-constructor<-
实例对象与原型直接的联系，原型链为了实现共享属性和继承


        创建对象的多种方式
1.对象字面量    2.构造函数     3.object.create


        实现继承的多种方法和优缺点
1.原型链继承方式    sub.prototype=new super
缺点：属性没有实现私有，通过改变原型增加的属性会作用在所有实例中
2.构造函数继承  sup.call()
优点：实现了属性的私有，缺点：没有参与原型链的共享
3.组合继承方式  sup.call  new sup()
融合原型链继承和构造函数的优点  缺点: 父类构造函数被调用两次,子类实例的属性存在两份。造成内存浪费
4.寄生继承  sup.call sub.prototype = obj.create(sup.prototype)
子类都有各自的实例不会相互影响，且共享了父类的方法  


        new 一个对象具体做了什么
1.新建一个obj，使用call方法让obj从构造函数上拿到原型链上的属性
将对象的proto隐式原型指向构造函数的prototype,返回对象obj

        
        变量提升
在js中函数和变量的声明都将提到最顶部，可以先使用在声明